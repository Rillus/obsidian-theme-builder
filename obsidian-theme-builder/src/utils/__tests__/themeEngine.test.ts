import { ThemeEngine } from '../themeEngine';

describe('ThemeEngine', () => {
  let themeEngine: ThemeEngine;

  beforeEach(() => {
    themeEngine = new ThemeEngine();
  });

  test('should create with default configuration', () => {
    const config = themeEngine.getConfiguration();
    expect(config.manifest.name).toBe('Custom Theme');
    expect(config.colors.primary).toBe('#007acc');
    expect(config.typography.fontFamily).toContain('Inter');
  });

  test('should update configuration', () => {
    const updates = {
      colors: {
        primary: '#ff0000'
      },
      manifest: {
        name: 'Test Theme'
      }
    };

    themeEngine.updateConfiguration(updates);
    const config = themeEngine.getConfiguration();

    expect(config.colors.primary).toBe('#ff0000');
    expect(config.manifest.name).toBe('Test Theme');
  });

  test('should validate configuration', () => {
    // Valid configuration
    let validation = themeEngine.validateConfiguration();
    expect(validation.isValid).toBe(true);
    expect(validation.errors).toHaveLength(0);

    // Invalid configuration - empty name
    themeEngine.updateConfiguration({
      manifest: { name: '' }
    });
    validation = themeEngine.validateConfiguration();
    expect(validation.isValid).toBe(false);
    expect(validation.errors).toContain('Theme name is required');
  });

  test('should export theme', () => {
    const theme = themeEngine.exportTheme();
    
    expect(theme.manifest.name).toBe('Custom Theme');
    expect(theme.css).toContain('/* Generated by Obsidian Theme Builder */');
    expect(theme.css).toContain('--background-primary: #ffffff');
    expect(theme.variables).toHaveLength(expect.any(Number));
  });

  test('should export theme files', () => {
    const files = themeEngine.exportThemeFiles();
    
    expect(files.manifest).toContain('"name": "Custom Theme"');
    expect(files.css).toContain('/* Generated by Obsidian Theme Builder */');
  });

  test('should reset to default', () => {
    // Change some values
    themeEngine.updateConfiguration({
      colors: { primary: '#ff0000' },
      manifest: { name: 'Modified Theme' }
    });

    // Reset
    themeEngine.resetToDefault();
    const config = themeEngine.getConfiguration();

    expect(config.colors.primary).toBe('#007acc');
    expect(config.manifest.name).toBe('Custom Theme');
  });

  test('should get preview data', () => {
    const previewData = themeEngine.getPreviewData();
    
    expect(previewData.colors.primary).toBe('#007acc');
    expect(previewData.typography.fontFamily).toContain('Inter');
  });
});